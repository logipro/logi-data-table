{"remainingRequest":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/react-hot-loader/babel.js\"],\"cacheDirectory\":true,\"babelrc\":false}!/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js","dependencies":[{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js","mtime":1542119824472},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport PropTypes from \"prop-types\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport LogiDataRow from \"./LogiDataRow\";\nimport { Paper } from \"@material-ui/core\";\n\nvar style = function style(theme) {\n  return {\n    root: {\n      width: \"100%\",\n      marginTop: theme.spacing.unit * 3,\n      overflowX: \"auto\"\n    },\n    table: {\n      minWidth: 700\n    }\n  };\n};\n\nvar AddButton = function AddButton(_ref) {\n  var onExecute = _ref.onExecute;\n  return React.createElement(IconButton, {\n    color: \"secondary\",\n    onClick: onExecute,\n    title: \"Add Record\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nvar LogiDataTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LogiDataTable, _Component);\n\n  function LogiDataTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LogiDataTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LogiDataTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      newlyAddedRecord: []\n    };\n    return _this;\n  }\n\n  _createClass(LogiDataTable, [{\n    key: \"addingNewRecord\",\n    value: function addingNewRecord() {\n      //---if already there is new record then ignore!\n      if (this.state.newRecord) return; //create new empty record\n\n      var newRecord = {};\n      this.props.columns.forEach(function (col) {\n        newRecord[col.accessor] = \"\";\n        newRecord[\"$E-\".concat(col.accessor)] = \"\";\n      });\n      this.setState({\n        newRecord: newRecord\n      });\n    }\n  }, {\n    key: \"addNewRecord\",\n    value: function addNewRecord(addedCols) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.props.addRecord(addedCols).then(function (response) {\n          var newlyAddedRecord = {};\n\n          if (response.success) {\n            //if the response has the record as well we add it from response\n            if (response.record) {\n              newlyAddedRecord = response.record;\n            } //add new record to set of newly added records\n            else {\n                _this2.props.columns.forEach(function (col) {\n                  var addedCol = addedCols.find(function (ac) {\n                    return ac.column === col.accessor;\n                  });\n                  newlyAddedRecord[col.accessor] = addedCol ? addedCol.value : \"\";\n                });\n              }\n\n            _this2.setState({\n              newRecord: undefined,\n              newlyAddedRecord: _this2.state.newlyAddedRecord.concat([newlyAddedRecord])\n            });\n\n            resolve(response.success);\n          } //insert has failed\n          else {\n              reject(false);\n            }\n        }).catch(function () {\n          return reject(false);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          columns = _this$props.columns,\n          dataRows = _this$props.dataRows;\n      return React.createElement(Paper, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, this.props.allowEdit || this.props.allowDelete ? React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.props.allowAddNew ? React.createElement(AddButton, {\n        onExecute: function onExecute() {\n          return _this3.addingNewRecord();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }) : null) : null, columns.filter(function (c) {\n        return !c.isHidden;\n      }).map(function (c) {\n        return React.createElement(TableCell, {\n          key: c.accessor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, c.header);\n      }))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.newRecord ? React.createElement(LogiDataRow, {\n        row: this.state.newRecord,\n        columns: columns,\n        index: -1,\n        newRow: true,\n        allowEdit: true,\n        saveChanges: function saveChanges(addedCols) {\n          return _this3.addNewRecord(addedCols);\n        },\n        newRowCanceled: function newRowCanceled() {\n          return _this3.setState({\n            newRecord: undefined\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }) : null, this.state.newlyAddedRecord.map(function (row, index) {\n        return React.createElement(LogiDataRow, {\n          key: \"N\".concat(index),\n          row: row,\n          columns: columns,\n          index: index,\n          allowEdit: false,\n          allowDelete: false,\n          allowAddNew: _this3.props.allowAddNew,\n          newlyAdded: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        });\n      }), dataRows.map(function (row, index) {\n        return React.createElement(LogiDataRow, {\n          key: index,\n          row: row,\n          columns: columns,\n          index: index,\n          allowEdit: _this3.props.allowEdit,\n          allowDelete: _this3.props.allowDelete,\n          allowAddNew: _this3.props.allowAddNew,\n          saveChanges: function saveChanges(changedCols) {\n            return _this3.props.saveChanges(row[_this3.props.keyAccessor], changedCols);\n          },\n          deleteRecord: function deleteRecord() {\n            return _this3.props.deleteRecord(row[_this3.props.keyAccessor]);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        });\n      }))));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return LogiDataTable;\n}(Component);\n\nLogiDataTable.propTypes = {\n  /** Array of Objects for the data rows that you want to display */\n  dataRows: PropTypes.array.isRequired,\n\n  /** TODO: show Loading if true */\n  loading: PropTypes.bool,\n\n  /** accessor (property/column name for the key column) */\n  keyAccessor: PropTypes.string,\n\n  /** Array of Objects defining columns\n   * {header, accessor, dataType, isReadOnly, isHidden}*/\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    header: PropTypes.string.isRequired,\n    accessor: PropTypes.string.isRequired,\n    dataType: PropTypes.oneOf([\"String\", \"Number\", \"Date\", \"DateTime\", \"Time\", \"Boolean\"]),\n    readOnly: PropTypes.bool,\n    isHidden: PropTypes.bool //if not available will be shown\n\n  })),\n\n  /** Obvs */\n  allowEdit: PropTypes.bool,\n\n  /** Obvs */\n  allowDelete: PropTypes.bool,\n\n  /** Obvs */\n  allowAddNew: PropTypes.bool,\n\n  /** LogiDataTable will call this function with the changedColumns {ColName, Value, sqlValue}\n   * and expects to get back a promise\n   * * {Success: True/False, Record: {optionally return the newly added record }*/\n  saveChanges: PropTypes.func,\n\n  /** LogiDataTable will call this function, sending it the key Value of the record to be deleted\n   * expects to receive back a promise resolving to\n   * * {Success: True/False, Record: {optionally return the newly added record }\n   */\n  deleteRecord: PropTypes.func,\n\n  /** LogiDataTable will call this function with new columns {ColName, Value, sqlValue}\n   * and expects to get back a promise which will resolve to\n   * {Success: True/False, Record: {optionally return the newly added record }\n   */\n  addRecord: PropTypes.func\n}; //exporting like this so Docz will pick the props!\n\nvar _default = LogiDataTable = withStyles(style)(LogiDataTable);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(style, \"style\", \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js\");\n  reactHotLoader.register(AddButton, \"AddButton\", \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js\");\n  reactHotLoader.register(LogiDataTable, \"LogiDataTable\", \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js\");\n  leaveModule(module);\n})();\n\n;\nLogiDataTable.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"addingNewRecord\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"addNewRecord\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"addedCols\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"LogiDataTable\",\n  \"props\": {\n    \"dataRows\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"Array of Objects for the data rows that you want to display\"\n    },\n    \"loading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"TODO: show Loading if true\"\n    },\n    \"keyAccessor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"accessor (property/column name for the key column)\"\n    },\n    \"columns\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"header\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"accessor\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"dataType\": {\n              \"name\": \"enum\",\n              \"value\": [{\n                \"value\": \"\\\"String\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"Number\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"Date\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"DateTime\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"Time\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"Boolean\\\"\",\n                \"computed\": false\n              }],\n              \"required\": false\n            },\n            \"readOnly\": {\n              \"name\": \"bool\",\n              \"required\": false\n            },\n            \"isHidden\": {\n              \"name\": \"bool\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"Array of Objects defining columns\\n{header, accessor, dataType, isReadOnly, isHidden}\"\n    },\n    \"allowEdit\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Obvs\"\n    },\n    \"allowDelete\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Obvs\"\n    },\n    \"allowAddNew\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Obvs\"\n    },\n    \"saveChanges\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"LogiDataTable will call this function with the changedColumns {ColName, Value, sqlValue}\\nand expects to get back a promise\\n* {Success: True/False, Record: {optionally return the newly added record }\"\n    },\n    \"deleteRecord\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"LogiDataTable will call this function, sending it the key Value of the record to be deleted\\nexpects to receive back a promise resolving to\\n* {Success: True/False, Record: {optionally return the newly added record }\"\n    },\n    \"addRecord\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"LogiDataTable will call this function with new columns {ColName, Value, sqlValue}\\nand expects to get back a promise which will resolve to\\n{Success: True/False, Record: {optionally return the newly added record }\"\n    }\n  }\n};",{"version":3,"sources":["/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/index.js"],"names":["Table","TableBody","TableCell","TableHead","TableRow","React","Component","withStyles","PropTypes","IconButton","AddIcon","LogiDataRow","Paper","style","theme","root","width","marginTop","spacing","unit","overflowX","table","minWidth","AddButton","onExecute","LogiDataTable","state","newlyAddedRecord","newRecord","props","columns","forEach","col","accessor","setState","addedCols","Promise","resolve","reject","addRecord","then","response","success","record","addedCol","find","ac","column","value","undefined","concat","catch","classes","dataRows","allowEdit","allowDelete","allowAddNew","addingNewRecord","filter","c","isHidden","map","header","addNewRecord","row","index","changedCols","saveChanges","keyAccessor","deleteRecord","propTypes","array","isRequired","loading","bool","string","arrayOf","shape","dataType","oneOf","readOnly","func"],"mappings":"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","sourcesContent":["import Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport PropTypes from \"prop-types\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport LogiDataRow from \"./LogiDataRow\";\nimport { Paper } from \"@material-ui/core\";\n\nconst style = theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 3,\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 700\n  }\n});\n\nconst AddButton = ({ onExecute }) => (\n  <IconButton color=\"secondary\" onClick={onExecute} title=\"Add Record\">\n    <AddIcon />\n  </IconButton>\n);\n\nclass LogiDataTable extends Component {\n  state = { newlyAddedRecord: [] };\n  addingNewRecord() {\n    //---if already there is new record then ignore!\n    if (this.state.newRecord) return;\n    //create new empty record\n    var newRecord = {};\n    this.props.columns.forEach(col => {\n      newRecord[col.accessor] = \"\";\n      newRecord[`$E-${col.accessor}`] = \"\";\n    });\n\n    this.setState({ newRecord });\n  }\n\n  addNewRecord(addedCols) {\n    return new Promise((resolve, reject) => {\n      this.props\n        .addRecord(addedCols)\n        .then(response => {\n          var newlyAddedRecord = {};\n          if (response.success) {\n            //if the response has the record as well we add it from response\n            if (response.record) {\n              newlyAddedRecord = response.record;\n            } //add new record to set of newly added records\n            else {\n              this.props.columns.forEach(col => {\n                var addedCol = addedCols.find(ac => ac.column === col.accessor);\n                newlyAddedRecord[col.accessor] = addedCol ? addedCol.value : \"\";\n              });\n            }\n            this.setState({\n              newRecord: undefined,\n              newlyAddedRecord: this.state.newlyAddedRecord.concat([\n                newlyAddedRecord\n              ])\n            });\n            resolve(response.success);\n          } //insert has failed\n          else {\n            reject(false);\n          }\n        })\n        .catch(() => reject(false));\n    });\n  }\n\n  render() {\n    const { classes, columns, dataRows } = this.props;\n    return (\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              {this.props.allowEdit || this.props.allowDelete ? (\n                <TableCell>\n                  {this.props.allowAddNew ? (\n                    <AddButton onExecute={() => this.addingNewRecord()} />\n                  ) : null}\n                </TableCell>\n              ) : null}\n\n              {columns\n                .filter(c => !c.isHidden)\n                .map(c => (\n                  <TableCell key={c.accessor}>{c.header}</TableCell>\n                ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.newRecord ? (\n              <LogiDataRow\n                row={this.state.newRecord}\n                columns={columns}\n                index={-1}\n                newRow={true}\n                allowEdit={true}\n                saveChanges={addedCols => this.addNewRecord(addedCols)}\n                newRowCanceled={() => this.setState({ newRecord: undefined })}\n              />\n            ) : null}\n            {this.state.newlyAddedRecord.map((row, index) => (\n              <LogiDataRow\n                key={`N${index}`}\n                row={row}\n                columns={columns}\n                index={index}\n                allowEdit={false}\n                allowDelete={false}\n                allowAddNew={this.props.allowAddNew}\n                newlyAdded\n              />\n            ))}\n            {dataRows.map((row, index) => (\n              <LogiDataRow\n                key={index}\n                row={row}\n                columns={columns}\n                index={index}\n                allowEdit={this.props.allowEdit}\n                allowDelete={this.props.allowDelete}\n                allowAddNew={this.props.allowAddNew}\n                saveChanges={changedCols =>\n                  this.props.saveChanges(\n                    row[this.props.keyAccessor],\n                    changedCols\n                  )\n                }\n                deleteRecord={() =>\n                  this.props.deleteRecord(row[this.props.keyAccessor])\n                }\n              />\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\n\nLogiDataTable.propTypes = {\n  /** Array of Objects for the data rows that you want to display */\n  dataRows: PropTypes.array.isRequired,\n  /** TODO: show Loading if true */\n  loading: PropTypes.bool,\n  /** accessor (property/column name for the key column) */\n  keyAccessor: PropTypes.string,\n  /** Array of Objects defining columns\n   * {header, accessor, dataType, isReadOnly, isHidden}*/\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      header: PropTypes.string.isRequired,\n      accessor: PropTypes.string.isRequired,\n      dataType: PropTypes.oneOf([\n        \"String\",\n        \"Number\",\n        \"Date\",\n        \"DateTime\",\n        \"Time\",\n        \"Boolean\"\n      ]),\n      readOnly: PropTypes.bool,\n      isHidden: PropTypes.bool //if not available will be shown\n    })\n  ),\n  /** Obvs */\n  allowEdit: PropTypes.bool,\n  /** Obvs */\n  allowDelete: PropTypes.bool,\n  /** Obvs */\n  allowAddNew: PropTypes.bool,\n  /** LogiDataTable will call this function with the changedColumns {ColName, Value, sqlValue}\n   * and expects to get back a promise\n   * * {Success: True/False, Record: {optionally return the newly added record }*/\n  saveChanges: PropTypes.func,\n  /** LogiDataTable will call this function, sending it the key Value of the record to be deleted\n   * expects to receive back a promise resolving to\n   * * {Success: True/False, Record: {optionally return the newly added record }\n   */\n  deleteRecord: PropTypes.func,\n  /** LogiDataTable will call this function with new columns {ColName, Value, sqlValue}\n   * and expects to get back a promise which will resolve to\n   * {Success: True/False, Record: {optionally return the newly added record }\n   */\n  addRecord: PropTypes.func\n};\n\n//exporting like this so Docz will pick the props!\nexport default (LogiDataTable = withStyles(style)(LogiDataTable));\n"]}]}