{"remainingRequest":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/react-hot-loader/babel.js\"],\"cacheDirectory\":true,\"babelrc\":false}!/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js","dependencies":[{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js","mtime":1541692183212},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport DateFnsUtils from \"material-ui-pickers/utils/date-fns-utils\";\nimport MuiPickersUtilsProvider from \"material-ui-pickers/MuiPickersUtilsProvider\";\nimport TimePicker from \"material-ui-pickers/TimePicker\";\nimport DatePicker from \"material-ui-pickers/DatePicker\";\nimport DateTimePicker from \"material-ui-pickers/DateTimePicker\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nfunction EditableTableCell(props) {\n  if (props.editMode && !props.readOnly) {\n    var onDateInputChange = function onDateInputChange(date) {\n      return props.changeValue(date.toISOString());\n    };\n\n    switch (props.dataType) {\n      case \"Date\":\n        return React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, React.createElement(DatePicker, {\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: onDateInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }));\n\n      case \"Time\":\n        return React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(TimePicker, {\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: onDateInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }));\n\n      case \"DateTime\":\n        return React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(DateTimePicker, {\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: onDateInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }));\n\n      case \"Boolean\":\n        return React.createElement(Checkbox, {\n          onChange: function onChange(e) {\n            props.changeValue(e.target.checked);\n          },\n          checked: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n\n      case \"Number\":\n      case \"String\":\n      default:\n        return React.createElement(TextField, {\n          type: props.dataType === \"Number\" ? \"number\" : \"text\",\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: function onChange(e) {\n            return props.changeValue(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n    }\n  } //read only mode\n  else {\n      //if datetime wrap it in wrapper without allowing change for better render!\n      // if ([\"Date\", \"DateTime\", \"Time\"].includes(props.dataType))\n      //   return (\n      //     <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      //       <DateTimePicker\n      //         value={props.dataRow[props.columnName]}\n      //         onChange={() => {\n      //           alert(\"Not allowed to edit\");\n      //         }}\n      //       />\n      //     </MuiPickersUtilsProvider>\n      //   );\n      switch (props.dataType) {\n        case \"Boolean\":\n          return React.createElement(Checkbox, {\n            checked: props.dataRow[props.columnName],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, props.dataRow[props.columnName]);\n      }\n    }\n}\n\nEditableTableCell.propTypes = {\n  dataRow: PropTypes.object.isRequired,\n  columnName: PropTypes.string.isRequired,\n  readOnly: PropTypes.bool,\n  changeValue: PropTypes.func.isRequired,\n  dataType: PropTypes.oneOf([\"String\", \"Number\", \"Date\", \"DateTime\", \"Time\", \"Boolean\"]).isRequired\n};\nEditableTableCell.defaultProps = {\n  editMode: false,\n  readOnly: false\n};\nvar _default = EditableTableCell;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(EditableTableCell, \"EditableTableCell\", \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js\");\n  leaveModule(module);\n})();\n\n;\nEditableTableCell.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EditableTableCell\",\n  \"props\": {\n    \"editMode\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"readOnly\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"dataRow\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"changeValue\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"dataType\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"String\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Date\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"DateTime\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Time\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Boolean\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js"],"names":["React","TextField","PropTypes","DateFnsUtils","MuiPickersUtilsProvider","TimePicker","DatePicker","DateTimePicker","Checkbox","EditableTableCell","props","editMode","readOnly","onDateInputChange","date","changeValue","toISOString","dataType","dataRow","columnName","undefined","e","target","checked","value","propTypes","object","isRequired","string","bool","func","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport DateFnsUtils from \"material-ui-pickers/utils/date-fns-utils\";\nimport MuiPickersUtilsProvider from \"material-ui-pickers/MuiPickersUtilsProvider\";\nimport TimePicker from \"material-ui-pickers/TimePicker\";\nimport DatePicker from \"material-ui-pickers/DatePicker\";\nimport DateTimePicker from \"material-ui-pickers/DateTimePicker\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nfunction EditableTableCell(props) {\n  if (props.editMode && !props.readOnly) {\n    const onDateInputChange = date => props.changeValue(date.toISOString());\n    switch (props.dataType) {\n      case \"Date\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              value={\n                props.dataRow[`$E-${props.columnName}`] !== undefined\n                  ? props.dataRow[`$E-${props.columnName}`]\n                  : props.dataRow[props.columnName]\n              }\n              onChange={onDateInputChange}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Time\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <TimePicker\n              value={\n                props.dataRow[`$E-${props.columnName}`] !== undefined\n                  ? props.dataRow[`$E-${props.columnName}`]\n                  : props.dataRow[props.columnName]\n              }\n              onChange={onDateInputChange}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"DateTime\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DateTimePicker\n              value={\n                props.dataRow[`$E-${props.columnName}`] !== undefined\n                  ? props.dataRow[`$E-${props.columnName}`]\n                  : props.dataRow[props.columnName]\n              }\n              onChange={onDateInputChange}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Boolean\":\n        return (\n          <Checkbox\n            onChange={e => {\n              props.changeValue(e.target.checked);\n            }}\n            checked={\n              props.dataRow[`$E-${props.columnName}`] !== undefined\n                ? props.dataRow[`$E-${props.columnName}`]\n                : props.dataRow[props.columnName]\n            }\n          />\n        );\n      case \"Number\":\n      case \"String\":\n      default:\n        return (\n          <TextField\n            type={props.dataType === \"Number\" ? \"number\" : \"text\"}\n            value={\n              props.dataRow[`$E-${props.columnName}`] !== undefined\n                ? props.dataRow[`$E-${props.columnName}`]\n                : props.dataRow[props.columnName]\n            }\n            onChange={e => props.changeValue(e.target.value)}\n          />\n        );\n    }\n  } //read only mode\n  else {\n    //if datetime wrap it in wrapper without allowing change for better render!\n    // if ([\"Date\", \"DateTime\", \"Time\"].includes(props.dataType))\n    //   return (\n    //     <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    //       <DateTimePicker\n    //         value={props.dataRow[props.columnName]}\n    //         onChange={() => {\n    //           alert(\"Not allowed to edit\");\n    //         }}\n    //       />\n    //     </MuiPickersUtilsProvider>\n    //   );\n    switch (props.dataType) {\n      case \"Boolean\":\n        return <Checkbox checked={props.dataRow[props.columnName]} />;\n      default:\n        return (\n          <React.Fragment>{props.dataRow[props.columnName]}</React.Fragment>\n        );\n    }\n  }\n}\n\nEditableTableCell.propTypes = {\n  dataRow: PropTypes.object.isRequired,\n  columnName: PropTypes.string.isRequired,\n  readOnly: PropTypes.bool,\n  changeValue: PropTypes.func.isRequired,\n  dataType: PropTypes.oneOf([\n    \"String\",\n    \"Number\",\n    \"Date\",\n    \"DateTime\",\n    \"Time\",\n    \"Boolean\"\n  ]).isRequired\n};\n\nEditableTableCell.defaultProps = {\n  editMode: false,\n  readOnly: false\n};\n\nexport default EditableTableCell;\n"]}]}