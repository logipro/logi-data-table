{"remainingRequest":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"cacheDirectory\":true,\"babelrc\":false}!/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js","dependencies":[{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js","mtime":1542044327616},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider } from \"material-ui-pickers\";\nimport { TimePicker } from \"material-ui-pickers\";\nimport { DatePicker } from \"material-ui-pickers\";\nimport { DateTimePicker } from \"material-ui-pickers\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\n\nfunction EditableTableCell(props) {\n  if (props.editMode && !props.readOnly) {\n    var onDateInputChange = function onDateInputChange(date) {\n      return props.changeValue(date.toISOString());\n    };\n\n    switch (props.dataType) {\n      case \"Date\":\n        return React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils\n        }, React.createElement(DatePicker, {\n          autoOk: true,\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: onDateInputChange,\n          rightArrowIcon: React.createElement(ArrowForward, null),\n          leftArrowIcon: React.createElement(ArrowBack, null)\n        }));\n\n      case \"Time\":\n        return React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils\n        }, React.createElement(TimePicker, {\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: onDateInputChange\n        }));\n\n      case \"DateTime\":\n        return React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils\n        }, React.createElement(DateTimePicker, {\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: onDateInputChange,\n          rightArrowIcon: React.createElement(ArrowForward, null),\n          leftArrowIcon: React.createElement(ArrowBack, null)\n        }));\n\n      case \"Boolean\":\n        return React.createElement(Checkbox, {\n          onChange: function onChange(e) {\n            props.changeValue(e.target.checked);\n          },\n          checked: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName]\n        });\n\n      case \"Number\":\n      case \"String\":\n      default:\n        return React.createElement(TextField, {\n          type: props.dataType === \"Number\" ? \"number\" : \"text\",\n          value: props.dataRow[\"$E-\".concat(props.columnName)] !== undefined ? props.dataRow[\"$E-\".concat(props.columnName)] : props.dataRow[props.columnName],\n          onChange: function onChange(e) {\n            return props.changeValue(e.target.value);\n          }\n        });\n    }\n  } //read only mode\n  else {\n      switch (props.dataType) {\n        case \"Date\":\n          return React.createElement(React.Fragment, null, new Date(props.dataRow[props.columnName]).toLocaleDateString());\n\n        case \"DateTime\":\n          return React.createElement(React.Fragment, null, new Date(props.dataRow[props.columnName]).toLocaleString());\n\n        case \"Time\":\n          return React.createElement(React.Fragment, null, new Date(props.dataRow[props.columnName]).toLocaleTimeString());\n\n        case \"Boolean\":\n          return React.createElement(Checkbox, {\n            checked: props.dataRow[props.columnName]\n          });\n\n        default:\n          return React.createElement(React.Fragment, null, props.dataRow[props.columnName]);\n      }\n    }\n}\n\nEditableTableCell.defaultProps = {\n  editMode: false,\n  readOnly: false\n};\nexport default EditableTableCell;\nEditableTableCell.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EditableTableCell\",\n  \"props\": {\n    \"editMode\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"readOnly\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"dataRow\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"changeValue\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"dataType\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"String\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Date\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"DateTime\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Time\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"Boolean\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/src/EditableTableCell.js"],"names":["React","TextField","DateFnsUtils","MuiPickersUtilsProvider","TimePicker","DatePicker","DateTimePicker","Checkbox","ArrowForward","ArrowBack","EditableTableCell","props","editMode","readOnly","onDateInputChange","date","changeValue","toISOString","dataType","dataRow","columnName","undefined","e","target","checked","value","Date","toLocaleDateString","toLocaleString","toLocaleTimeString","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider } from \"material-ui-pickers\";\nimport { TimePicker } from \"material-ui-pickers\";\nimport { DatePicker } from \"material-ui-pickers\";\nimport { DateTimePicker } from \"material-ui-pickers\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\n\nfunction EditableTableCell(props) {\n  if (props.editMode && !props.readOnly) {\n    const onDateInputChange = date => props.changeValue(date.toISOString());\n    switch (props.dataType) {\n      case \"Date\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              autoOk={true}\n              value={\n                props.dataRow[`$E-${props.columnName}`] !== undefined\n                  ? props.dataRow[`$E-${props.columnName}`]\n                  : props.dataRow[props.columnName]\n              }\n              onChange={onDateInputChange}\n              rightArrowIcon={<ArrowForward />}\n              leftArrowIcon={<ArrowBack />}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Time\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <TimePicker\n              value={\n                props.dataRow[`$E-${props.columnName}`] !== undefined\n                  ? props.dataRow[`$E-${props.columnName}`]\n                  : props.dataRow[props.columnName]\n              }\n              onChange={onDateInputChange}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"DateTime\":\n        return (\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DateTimePicker\n              value={\n                props.dataRow[`$E-${props.columnName}`] !== undefined\n                  ? props.dataRow[`$E-${props.columnName}`]\n                  : props.dataRow[props.columnName]\n              }\n              onChange={onDateInputChange}\n              rightArrowIcon={<ArrowForward />}\n              leftArrowIcon={<ArrowBack />}\n            />\n          </MuiPickersUtilsProvider>\n        );\n      case \"Boolean\":\n        return (\n          <Checkbox\n            onChange={e => {\n              props.changeValue(e.target.checked);\n            }}\n            checked={\n              props.dataRow[`$E-${props.columnName}`] !== undefined\n                ? props.dataRow[`$E-${props.columnName}`]\n                : props.dataRow[props.columnName]\n            }\n          />\n        );\n      case \"Number\":\n      case \"String\":\n      default:\n        return (\n          <TextField\n            type={props.dataType === \"Number\" ? \"number\" : \"text\"}\n            value={\n              props.dataRow[`$E-${props.columnName}`] !== undefined\n                ? props.dataRow[`$E-${props.columnName}`]\n                : props.dataRow[props.columnName]\n            }\n            onChange={e => props.changeValue(e.target.value)}\n          />\n        );\n    }\n  } //read only mode\n  else {\n    switch (props.dataType) {\n      case \"Date\":\n        return (\n          <React.Fragment>\n            {new Date(props.dataRow[props.columnName]).toLocaleDateString()}\n          </React.Fragment>\n        );\n      case \"DateTime\":\n        return (\n          <React.Fragment>\n            {new Date(props.dataRow[props.columnName]).toLocaleString()}\n          </React.Fragment>\n        );\n      case \"Time\":\n        return (\n          <React.Fragment>\n            {new Date(props.dataRow[props.columnName]).toLocaleTimeString()}\n          </React.Fragment>\n        );\n      case \"Boolean\":\n        return <Checkbox checked={props.dataRow[props.columnName]} />;\n      default:\n        return (\n          <React.Fragment>{props.dataRow[props.columnName]}</React.Fragment>\n        );\n    }\n  }\n}\n\nEditableTableCell.propTypes = {\n  dataRow: PropTypes.object.isRequired,\n  columnName: PropTypes.string.isRequired,\n  readOnly: PropTypes.bool,\n  changeValue: PropTypes.func.isRequired,\n  dataType: PropTypes.oneOf([\n    \"String\",\n    \"Number\",\n    \"Date\",\n    \"DateTime\",\n    \"Time\",\n    \"Boolean\"\n  ]).isRequired\n};\n\nEditableTableCell.defaultProps = {\n  editMode: false,\n  readOnly: false\n};\n\nexport default EditableTableCell;\n"]}]}