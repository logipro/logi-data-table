{"remainingRequest":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"cacheDirectory\":true,\"babelrc\":false}!/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/demo/src/Demo.js","dependencies":[{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/demo/src/Demo.js","mtime":1542119852492},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React, { Component } from \"react\";\nimport LogiDataTable from \"../../src/\";\nimport Paper from \"@material-ui/core/Paper\";\n\nvar Demo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Demo, _Component);\n\n  function Demo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Demo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Demo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dataRows: []\n    };\n    return _this;\n  }\n\n  _createClass(Demo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {\n      this.setState({\n        dataRows: [{\n          ID: 1,\n          Name: \"Ash\",\n          Surname: \"K\",\n          DOB: \"2083-02-23\",\n          TOB: \"2083-02-23 15:00\",\n          IsMental: true,\n          FavNumber: 7,\n          DateTimeSample: \"2083-02-23 15:00\"\n        }, {\n          ID: 2,\n          Name: \"Charlotte\",\n          Surname: \"KG\",\n          DOB: \"2045-03-24\",\n          TOB: \"2045-03-24 10:20\",\n          IsMental: false,\n          FavNumber: 8,\n          DateTimeSample: \"2283-02-23 15:00\"\n        }]\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var columns = [{\n        header: \"ID\",\n        accessor: \"ID\",\n        dataType: \"Number\",\n        readOnly: true\n      }, {\n        header: \"Surname\",\n        accessor: \"Surname\",\n        dataType: \"String\"\n      }, {\n        header: \"DOB\",\n        accessor: \"DOB\",\n        dataType: \"Date\",\n        readOnly: false\n      }, {\n        header: \"TOB\",\n        accessor: \"TOB\",\n        dataType: \"Time\",\n        readOnly: false\n      }, {\n        header: \"Is Mental\",\n        accessor: \"IsMental\",\n        dataType: \"Boolean\"\n      }, {\n        header: \"FavNumber\",\n        accessor: \"FavNumber\",\n        dataType: \"Number\"\n      }, {\n        header: \"Date Time Sample\",\n        accessor: \"DateTimeSample\",\n        dataType: \"DateTime\"\n      }];\n      return React.createElement(Paper, null, React.createElement(LogiDataTable, {\n        dataRows: this.state.dataRows,\n        columns: columns,\n        keyAccessor: \"ID\",\n        allowEdit: true,\n        allowDelete: true,\n        allowAddNew: true,\n        saveChanges: function saveChanges(keyValue, changedColumns) {\n          alert(\"KeyValue: \".concat(keyValue, \" \\n changedColumn(s) : \\n              \").concat(changedColumns.map(function (c) {\n            return \"\".concat(c.column, \" : \").concat(c.value, \" - (sql Value) : \").concat(c.sqlValue);\n          }).join(\"\\n\"), \" \\n You must return a promise with {success : Boolean} so the grid can update \"));\n          return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n              return resolve({\n                success: true\n              });\n            }, 1000);\n          });\n        },\n        addRecord: function addRecord(addedColumns) {\n          alert(\"AddedColumn(s) : \\n              \".concat(addedColumns.map(function (c) {\n            return \"\".concat(c.column, \" : \").concat(c.value, \" - (sql Value) : \").concat(c.sqlValue);\n          }).join(\"\\n\"), \" \\n You must return a promise with {success : Boolean} so the grid \\n optionally return the inserted record for grid to show it\"));\n          return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n              return resolve({\n                success: true\n              });\n            }, 1000);\n          });\n        },\n        deleteRecord: function deleteRecord(keyValue) {\n          alert(\"KeyValue: \".concat(keyValue, \" \\n\\nAfter deleting the record return {success:boolean}\\n* Note: you can show confirmation dialog here \"));\n          return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n              return resolve({\n                success: true\n              });\n            }, 1000);\n          });\n        }\n      }));\n    }\n  }]);\n\n  return Demo;\n}(Component);\n\nexport default Demo;\nDemo.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"fetchData\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }],\n  \"displayName\": \"Demo\"\n};",{"version":3,"sources":["/Users/Ashkan/Desktop/LogiPro/LogiDash/logi-data-table/demo/src/Demo.js"],"names":["React","Component","LogiDataTable","Paper","Demo","state","dataRows","fetchData","setState","ID","Name","Surname","DOB","TOB","IsMental","FavNumber","DateTimeSample","columns","header","accessor","dataType","readOnly","keyValue","changedColumns","alert","map","c","column","value","sqlValue","join","Promise","resolve","reject","setTimeout","success","addedColumns"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport LogiDataTable from \"../../src/\";\nimport Paper from \"@material-ui/core/Paper\";\n\nclass Demo extends Component {\n  state = {\n    dataRows: []\n  };\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    this.setState({\n      dataRows: [\n        {\n          ID: 1,\n          Name: \"Ash\",\n          Surname: \"K\",\n          DOB: \"2083-02-23\",\n          TOB: \"2083-02-23 15:00\",\n          IsMental: true,\n          FavNumber: 7,\n          DateTimeSample: \"2083-02-23 15:00\"\n        },\n        {\n          ID: 2,\n          Name: \"Charlotte\",\n          Surname: \"KG\",\n          DOB: \"2045-03-24\",\n          TOB: \"2045-03-24 10:20\",\n          IsMental: false,\n          FavNumber: 8,\n          DateTimeSample: \"2283-02-23 15:00\"\n        }\n      ]\n    });\n  }\n\n  render() {\n    const columns = [\n      {\n        header: \"ID\",\n        accessor: \"ID\",\n        dataType: \"Number\",\n        readOnly: true\n      },\n      {\n        header: \"Surname\",\n        accessor: \"Surname\",\n        dataType: \"String\"\n      },\n      {\n        header: \"DOB\",\n        accessor: \"DOB\",\n        dataType: \"Date\",\n        readOnly: false\n      },\n      {\n        header: \"TOB\",\n        accessor: \"TOB\",\n        dataType: \"Time\",\n        readOnly: false\n      },\n      {\n        header: \"Is Mental\",\n        accessor: \"IsMental\",\n        dataType: \"Boolean\"\n      },\n      {\n        header: \"FavNumber\",\n        accessor: \"FavNumber\",\n        dataType: \"Number\"\n      },\n      {\n        header: \"Date Time Sample\",\n        accessor: \"DateTimeSample\",\n        dataType: \"DateTime\"\n      }\n    ];\n\n    return (\n      <Paper>\n        <LogiDataTable\n          dataRows={this.state.dataRows}\n          columns={columns}\n          keyAccessor={\"ID\"}\n          allowEdit={true}\n          allowDelete={true}\n          allowAddNew={true}\n          saveChanges={(keyValue, changedColumns) => {\n            alert(\n              `KeyValue: ${keyValue} \\n changedColumn(s) : \n              ${changedColumns\n                .map(\n                  c => `${c.column} : ${c.value} - (sql Value) : ${c.sqlValue}`\n                )\n                .join(\n                  \"\\n\"\n                )} \\n You must return a promise with {success : Boolean} so the grid can update `\n            );\n            return new Promise(function(resolve, reject) {\n              setTimeout(() => resolve({ success: true }), 1000);\n            });\n          }}\n          addRecord={addedColumns => {\n            alert(\n              `AddedColumn(s) : \n              ${addedColumns\n                .map(\n                  c => `${c.column} : ${c.value} - (sql Value) : ${c.sqlValue}`\n                )\n                .join(\n                  \"\\n\"\n                )} \\n You must return a promise with {success : Boolean} so the grid \\n optionally return the inserted record for grid to show it`\n            );\n            return new Promise(function(resolve, reject) {\n              setTimeout(() => resolve({ success: true }), 1000);\n            });\n          }}\n          deleteRecord={keyValue => {\n            alert(\n              `KeyValue: ${keyValue} \\n\nAfter deleting the record return {success:boolean}\n* Note: you can show confirmation dialog here `\n            );\n            return new Promise(function(resolve, reject) {\n              setTimeout(() => resolve({ success: true }), 1000);\n            });\n          }}\n        />\n      </Paper>\n    );\n  }\n}\n\nexport default Demo;\n"]}]}